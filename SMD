import pandas as pd
import numpy as np

def standardized_mean_diff(df, treat_col, covariates):
    treated = df[df[treat_col]==1]
    control = df[df[treat_col]==0]

    smd = {}
    for cov in covariates:
        mean_t = treated[cov].mean()
        mean_c = control[cov].mean()
        var_t = treated[cov].var()
        var_c = control[cov].var()

        smd[cov] = (mean_t - mean_c) / np.sqrt((var_t + var_c) / 2)
    return pd.Series(smd)

# Example
smd_results = standardized_mean_diff(matched_df, "treatment", ["age","bmi","bp"])
print(smd_results)


import matplotlib.pyplot as plt

smd_before = standardized_mean_diff(original_df, "treatment", ["age","bmi","bp"])
smd_after = standardized_mean_diff(matched_df, "treatment", ["age","bmi","bp"])

plt.figure(figsize=(6,4))
plt.scatter(smd_before.index, smd_before.values, label="Before Matching", color="red")
plt.scatter(smd_after.index, smd_after.values, label="After Matching", color="blue")
plt.axhline(0.1, color="gray", linestyle="--")
plt.axhline(-0.1, color="gray", linestyle="--")
plt.xticks(rotation=45)
plt.ylabel("Standardized Mean Difference")
plt.legend()
plt.show()


# split into treatment & control
Treatment_df = sample[sample['grp_binary'] == 1]
Control_df   = sample[sample['grp_binary'] == 0]

matched_df_list = []
used_controls = set()   # <--- keep track of already used control indices

# match within each gender group
for gender in sample['gender_cd'].unique():
    t_df = Treatment_df[Treatment_df['gender_cd'] == gender]
    c_df = Control_df[Control_df['gender_cd'] == gender]

    if len(t_df) == 0 or len(c_df) == 0:
        continue

    nn = NearestNeighbors(n_neighbors=2)
    nn.fit(c_df[['propensity_logit']])

    distances, indices = nn.kneighbors(t_df[['propensity_logit']])

    # flatten neighbor indices
    matched_control_indices = indices.flatten()

    # enforce without replacement
    new_control = []
    for idx in matched_control_indices:
        if idx not in used_controls:
            new_control.append(c_df.iloc[idx])
            used_controls.add(idx)   # mark this control as used

    # convert list back to DataFrame
    if len(new_control) > 0:
        new_control_df = pd.DataFrame(new_control)
        matched_df_list.append(pd.concat([t_df.reset_index(drop=True),
                                          new_control_df.reset_index(drop=True)], axis=1))

# combine matched data
matched_df = pd.concat(matched_df_list, ignore_index=True)


